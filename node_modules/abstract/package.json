{
  "_args": [
    [
      "abstract@~0.1.2",
      "/home/facuz/Proyectos/torrentmedia/node_modules/object-settings"
    ]
  ],
  "_from": "abstract@>=0.1.2 <0.2.0",
  "_id": "abstract@0.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/abstract",
  "_npmUser": {
    "email": "andy.potanin@usabilitydynamics.com",
    "name": "andy.potanin"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "name": "abstract",
    "raw": "abstract@~0.1.2",
    "rawSpec": "~0.1.2",
    "scope": null,
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/object-settings"
  ],
  "_resolved": "https://registry.npmjs.org/abstract/-/abstract-0.1.2.tgz",
  "_shasum": "ba47eca5f652dca44a1061d3e2aae0a24989185d",
  "_shrinkwrap": null,
  "_spec": "abstract@~0.1.2",
  "_where": "/home/facuz/Proyectos/torrentmedia/node_modules/object-settings",
  "author": {
    "email": "info@usabilitydynamics.com",
    "name": "Usability Dynamics",
    "url": "http://usabilitydynamics.com"
  },
  "bugs": {
    "url": "https://github.com/UsabilityDynamics/node-abstract/issues"
  },
  "contributors": [
    {
      "email": "andy.potanin@usabilitydynamics.com",
      "name": "Andy Potanin",
      "url": "http://usabilitydynamics.com"
    },
    {
      "email": "ivan.mccarthy@usabilitydynamics.com",
      "name": "Ivan McCarthy",
      "url": "http://usabilitydynamics.com"
    }
  ],
  "dependencies": {
    "async": "*",
    "cli-table": "*",
    "colors": "*",
    "deep-extend": "~0.2.6",
    "lodash": "*",
    "object-settings": "*"
  },
  "description": "Abstraction of JavaScript Objects.",
  "devDependencies": {
    "Faker": "*",
    "eventemitter2": "*",
    "express": "*",
    "mocha": "*",
    "request": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "ba47eca5f652dca44a1061d3e2aae0a24989185d",
    "tarball": "https://registry.npmjs.org/abstract/-/abstract-0.1.2.tgz"
  },
  "homepage": "https://github.com/UsabilityDynamics/node-abstract#readme",
  "keywords": [
    "object",
    "module",
    "class",
    "prototype",
    "events"
  ],
  "main": "./lib/abstract",
  "maintainers": [
    {
      "email": "andy.potanin@usabilitydynamics.com",
      "name": "andy.potanin"
    }
  ],
  "name": "abstract",
  "optionalDependencies": {
    "cli-table": "*",
    "colors": "*"
  },
  "readme": "Abstract.js\n-----------\n\nNotice: Under development.\n\nThe Abstract library is used for rapidly developing JavaScript prototypal \"Models\" and \"Instances\".\nEach new Model can be defined by you as needed within a special context which allows you to rapidly \ndefine complex constructors.\n\nModule Methods\n==============\nIn addition to the Model method, used for creating Prototype models, the module exposes a variety of useful\nstatic methods that can be used outside of the Model context.\n\n    - Abstract.createModel( function MyPrototypeModel() {}): Creates a Model Factory environment.\n    - Abstract.create( prototype, properties ): Simple Object creation without a constructor.\n    - Abstract.defineProperty( target, property, descriptor ): Add single property.\n    - Abstract.defineProperties( target, properties ): Add multiple properties.\n\nIn the Abstract.Model example the MyPrototypeModel method is a method in which the actual model is configured.\nThe above methods are available within the Model Constructor, the \"target\" attribute is omitted since the\ncontext is set automatically when the methods are called via \"this\" object.\n\nModule Factory Methods\n======================\nThe below methods are available within the context of an Abstract.createModel( [fn] ) function.\n\n    - this.use( prototype ): Insert target object into current context's context prototype chain.\n    - this.require( module ): Require a module and insert it's exports into current context's prototype chain.\n    - this.set( key, value ): Set meta key and value, will be used as defaults by instaces.\n    - this.get( key ): Get a value.\n    - this.defineConstructor( function MyInstanceConstructor() {} ): Creates an Instance Factory environment.\n    - this.defineProperty( property, descriptor ): Add single property t othe instance prototype.\n    - this.defineProperties( properties ): Add multiple properties to the Instance prototype.\n\nInstance Factory Methods\n========================\nThe Abstract.prototype object contains properties that will be inherited by all Instances created from a Model.\nAll the default methods listen below are non-enumerable, but any methods you define for the Model will be\nenumerable by default, and wil overwrite any default methods.\n\n    - this.use( obj ): Inject external functionality into the context. Uses Abstract.addPrototype within context.\n    - this.mixin( obj ): Extends the Instance's prototype into the target object.\n    - this.extend( obj ): Extends the target object into the current instance.\n    - this.create( args ): Create an instance with provided args.\n    - this.set( key, value ): Set meta key and value.\n    - this.get( key ): Get key a value.\n\nProperty Descriptor Options\n===========================\nThe ECMA5 Object.defineProperty() method allows for advanced property settings, such as enumerability.\nThe Abstract modules allows for use of additional options in addition to the default options available\nvia Object.defineProperty().\n\nTo review, the standard ECMA5 options are:\n\n    - value: The value associated with the property. Can be any valid JavaScript value (number, object, function, etc) Defaults to undefined.\n    - get: A function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property. Defaults to undefined.\n    - set: A function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property. Defaults to undefined.\n    - configurable: true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. Defaults to false.\n    - enumerable: true if and only if this property shows up during enumeration of the properties on the corresponding object. Defaults to false.\n    - writable: True if and only if the value associated with the property may be changed with an assignment operator. Defaults to false.\n\nWhen using Abstract.defineProperty(), Abstract.create() or Abstract.defineProperties() the following options are also available:\n\n    - description: The plain-text description of the property.\n    - properties: Sets properties of the \"value\".\n    - watch: Configures the property value as watchable.\n\nThe additional options determine the way Model properties are handled and passed down to Instances.\nThe additional configuration is accessible via {YourObject}.meta.schema object. See Instance Meta section for more information.\n\n    - id: A random hash is generated on instantiation\n    - model: Set to the name of the constructor, e.g. \"MyPrototypeModel\" by default, used to determine \"path\".\n    - schema: Object containing the property schema generated from property descriptors.\n    - path: The prototype path to the current instance, e.g. Abstract.MyPrototypeModel.my_instance_id. (The Object.Function is omitted).\n\nEach Module and Instance must have a unique name which will be used to establish namespace and path.\nName will be generated from constructor's name if not specified.\n\nBasic Usage\n===========\n\n#### Return Constructor.\nNotice location of modul.exports.\n\n    require( 'abstract' ).createModel( function Service( model, prototype ) {\n\n      // Model Logic\n\n      module.exports = this.defineConstructor( function start( name ) {\n        console.log( 'Creating Instance', name );\n      });\n\n    });\n\n    module.exports( 'Instance1' )\n    module.exports( 'Instance2' )\n\n#### Return Model\nNotice location of modul.exports.\n\n    require( 'abstract' ).createModel( module.exports = function Service( model, prototype ) {\n\n      // Model Logic\n\n      this.defineConstructor( function create( name ) {\n        console.log( 'Creating Instance', name );\n      });\n\n    });\n\n    module.exports.create( 'Instance1' );\n    module.exports.create( 'Instance2' );\n\nTerminology\n===========\n\n  - Model Factory: Method in which you configure the Prototype Constructor and Instance Factory\n  - Instance Factory: Method within the Model Factory that is called on every Instance creation.\n  - Property Descriptors: Extended property descriptors.\n\nLicense\n=======\n\n(The MIT License)\n\nCopyright (c) 2013 Usability Dynamics, Inc. &lt;info@usabilitydynamics.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/UsabilityDynamics/node-abstract.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.2"
}
